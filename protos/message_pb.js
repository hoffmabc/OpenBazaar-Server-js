/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var objects_pb = require('./objects_pb.js');
goog.exportSymbol('proto.Command', null, global);
goog.exportSymbol('proto.Message', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Message.repeatedFields_, null);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Message.displayName = 'proto.Message';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Message.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: msg.getMessageid_asB64(),
    sender: (f = msg.getSender()) && objects_pb.Node.toObject(includeInstance, f),
    command: msg.getCommand(),
    protover: msg.getProtover(),
    argumentsList: msg.getArgumentsList_asB64(),
    testnet: msg.getTestnet(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMessageid(value);
      break;
    case 2:
      var value = new objects_pb.Node;
      reader.readMessage(value,objects_pb.Node.deserializeBinaryFromReader);
      msg.setSender(value);
      break;
    case 3:
      var value = /** @type {!proto.Command} */ (reader.readEnum());
      msg.setCommand(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProtover(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getArgumentsList().push(value);
      msg.setArgumentsList(msg.getArgumentsList());
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTestnet(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Message.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMessageid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getSender();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      objects_pb.Node.serializeBinaryToWriter
    );
  }
  f = this.getCommand();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getProtover();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getArgumentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      5,
      f
    );
  }
  f = this.getTestnet();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Message} The clone.
 */
proto.Message.prototype.cloneMessage = function() {
  return /** @type {!proto.Message} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes messageID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Message.prototype.getMessageid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes messageID = 1;
 * This is a type-conversion wrapper around `getMessageid()`
 * @return {string}
 */
proto.Message.prototype.getMessageid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMessageid()));
};


/**
 * optional bytes messageID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMessageid()`
 * @return {!Uint8Array}
 */
proto.Message.prototype.getMessageid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMessageid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Message.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional Node sender = 2;
 * @return {proto.Node}
 */
proto.Message.prototype.getSender = function() {
  return /** @type{proto.Node} */ (
    jspb.Message.getWrapperField(this, objects_pb.Node, 2));
};


/** @param {proto.Node|undefined} value  */
proto.Message.prototype.setSender = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.Message.prototype.clearSender = function() {
  this.setSender(undefined);
};


/**
 * optional Command command = 3;
 * @return {!proto.Command}
 */
proto.Message.prototype.getCommand = function() {
  return /** @type {!proto.Command} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.Command} value  */
proto.Message.prototype.setCommand = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 protoVer = 4;
 * @return {number}
 */
proto.Message.prototype.getProtover = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.Message.prototype.setProtover = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * repeated bytes arguments = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.Message.prototype.getArgumentsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 5));
};


/**
 * repeated bytes arguments = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getArgumentsList()`
 * @return {!Array.<string>}
 */
proto.Message.prototype.getArgumentsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getArgumentsList()));
};


/**
 * repeated bytes arguments = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getArgumentsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.Message.prototype.getArgumentsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getArgumentsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.Message.prototype.setArgumentsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * optional bool testnet = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Message.prototype.getTestnet = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.Message.prototype.setTestnet = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bytes signature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.Message.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 7, ""));
};


/**
 * optional bytes signature = 7;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.Message.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.Message.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Message.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * @enum {number}
 */
proto.Command = {
  PING: 0,
  STUN: 1,
  HOLE_PUNCH: 2,
  STORE: 3,
  DELETE: 4,
  INV: 5,
  VALUES: 6,
  BROADCAST: 7,
  MESSAGE: 8,
  FOLLOW: 9,
  UNFOLLOW: 10,
  ORDER: 11,
  ORDER_CONFIRMATION: 12,
  COMPLETE_ORDER: 13,
  FIND_NODE: 14,
  FIND_VALUE: 15,
  GET_CONTRACT: 16,
  GET_IMAGE: 17,
  GET_PROFILE: 18,
  GET_LISTINGS: 19,
  GET_USER_METADATA: 20,
  GET_CONTRACT_METADATA: 21,
  GET_FOLLOWING: 22,
  GET_FOLLOWERS: 23,
  GET_RATINGS: 24,
  DISPUTE_OPEN: 25,
  DISPUTE_CLOSE: 26,
  REFUND: 27,
  BAD_REQUEST: 400,
  NOT_FOUND: 404,
  CALM_DOWN: 420,
  UNKNOWN_ERROR: 520
};

goog.object.extend(exports, proto);
