/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var countries_pb = require('./countries_pb.js');
goog.exportSymbol('proto.Followers', null, global);
goog.exportSymbol('proto.Followers.Follower', null, global);
goog.exportSymbol('proto.Following', null, global);
goog.exportSymbol('proto.Following.User', null, global);
goog.exportSymbol('proto.Inv', null, global);
goog.exportSymbol('proto.Listings', null, global);
goog.exportSymbol('proto.Listings.ContractType', null, global);
goog.exportSymbol('proto.Listings.ListingMetadata', null, global);
goog.exportSymbol('proto.Metadata', null, global);
goog.exportSymbol('proto.NATType', null, global);
goog.exportSymbol('proto.Node', null, global);
goog.exportSymbol('proto.Node.IPAddress', null, global);
goog.exportSymbol('proto.PlaintextMessage', null, global);
goog.exportSymbol('proto.PlaintextMessage.Type', null, global);
goog.exportSymbol('proto.Profile', null, global);
goog.exportSymbol('proto.Profile.PublicKey', null, global);
goog.exportSymbol('proto.Profile.SocialAccount', null, global);
goog.exportSymbol('proto.Profile.SocialAccount.SocialType', null, global);
goog.exportSymbol('proto.Value', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Node = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Node, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Node.displayName = 'proto.Node';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Node.prototype.toObject = function(opt_includeInstance) {
  return proto.Node.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Node} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Node.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: msg.getGuid_asB64(),
    publickey: msg.getPublickey_asB64(),
    nattype: msg.getNattype(),
    nodeaddress: (f = msg.getNodeaddress()) && proto.Node.IPAddress.toObject(includeInstance, f),
    relayaddress: (f = msg.getRelayaddress()) && proto.Node.IPAddress.toObject(includeInstance, f),
    vendor: msg.getVendor()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Node}
 */
proto.Node.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Node;
  return proto.Node.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Node} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Node}
 */
proto.Node.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 3:
      var value = /** @type {!proto.NATType} */ (reader.readEnum());
      msg.setNattype(value);
      break;
    case 4:
      var value = new proto.Node.IPAddress;
      reader.readMessage(value,proto.Node.IPAddress.deserializeBinaryFromReader);
      msg.setNodeaddress(value);
      break;
    case 5:
      var value = new proto.Node.IPAddress;
      reader.readMessage(value,proto.Node.IPAddress.deserializeBinaryFromReader);
      msg.setRelayaddress(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVendor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Node} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Node.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Node.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Node.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getNattype();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getNodeaddress();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Node.IPAddress.serializeBinaryToWriter
    );
  }
  f = this.getRelayaddress();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Node.IPAddress.serializeBinaryToWriter
    );
  }
  f = this.getVendor();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Node} The clone.
 */
proto.Node.prototype.cloneMessage = function() {
  return /** @type {!proto.Node} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes guid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Node.prototype.getGuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes guid = 1;
 * This is a type-conversion wrapper around `getGuid()`
 * @return {string}
 */
proto.Node.prototype.getGuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGuid()));
};


/**
 * optional bytes guid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGuid()`
 * @return {!Uint8Array}
 */
proto.Node.prototype.getGuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGuid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Node.prototype.setGuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes publicKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Node.prototype.getPublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes publicKey = 2;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.Node.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.Node.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Node.prototype.setPublickey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional NATType natType = 3;
 * @return {!proto.NATType}
 */
proto.Node.prototype.getNattype = function() {
  return /** @type {!proto.NATType} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.NATType} value  */
proto.Node.prototype.setNattype = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional IPAddress nodeAddress = 4;
 * @return {proto.Node.IPAddress}
 */
proto.Node.prototype.getNodeaddress = function() {
  return /** @type{proto.Node.IPAddress} */ (
    jspb.Message.getWrapperField(this, proto.Node.IPAddress, 4));
};


/** @param {proto.Node.IPAddress|undefined} value  */
proto.Node.prototype.setNodeaddress = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Node.prototype.clearNodeaddress = function() {
  this.setNodeaddress(undefined);
};


/**
 * optional IPAddress relayAddress = 5;
 * @return {proto.Node.IPAddress}
 */
proto.Node.prototype.getRelayaddress = function() {
  return /** @type{proto.Node.IPAddress} */ (
    jspb.Message.getWrapperField(this, proto.Node.IPAddress, 5));
};


/** @param {proto.Node.IPAddress|undefined} value  */
proto.Node.prototype.setRelayaddress = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.Node.prototype.clearRelayaddress = function() {
  this.setRelayaddress(undefined);
};


/**
 * optional bool vendor = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Node.prototype.getVendor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.Node.prototype.setVendor = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Node.IPAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Node.IPAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Node.IPAddress.displayName = 'proto.Node.IPAddress';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Node.IPAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.Node.IPAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Node.IPAddress} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Node.IPAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: msg.getIp(),
    port: msg.getPort()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Node.IPAddress}
 */
proto.Node.IPAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Node.IPAddress;
  return proto.Node.IPAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Node.IPAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Node.IPAddress}
 */
proto.Node.IPAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Node.IPAddress} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Node.IPAddress.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Node.IPAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Node.IPAddress.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getIp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Node.IPAddress} The clone.
 */
proto.Node.IPAddress.prototype.cloneMessage = function() {
  return /** @type {!proto.Node.IPAddress} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string ip = 1;
 * @return {string}
 */
proto.Node.IPAddress.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Node.IPAddress.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 port = 2;
 * @return {number}
 */
proto.Node.IPAddress.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.Node.IPAddress.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Value.displayName = 'proto.Value';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Value} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyword: msg.getKeyword_asB64(),
    valuekey: msg.getValuekey_asB64(),
    serializeddata: msg.getSerializeddata_asB64(),
    ttl: msg.getTtl()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Value}
 */
proto.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Value;
  return proto.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Value}
 */
proto.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyword(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValuekey(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSerializeddata(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTtl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Value} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Value.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Value.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getValuekey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getSerializeddata_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getTtl();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Value} The clone.
 */
proto.Value.prototype.cloneMessage = function() {
  return /** @type {!proto.Value} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes keyword = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Value.prototype.getKeyword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes keyword = 1;
 * This is a type-conversion wrapper around `getKeyword()`
 * @return {string}
 */
proto.Value.prototype.getKeyword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyword()));
};


/**
 * optional bytes keyword = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyword()`
 * @return {!Uint8Array}
 */
proto.Value.prototype.getKeyword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyword()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Value.prototype.setKeyword = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes valueKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Value.prototype.getValuekey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes valueKey = 2;
 * This is a type-conversion wrapper around `getValuekey()`
 * @return {string}
 */
proto.Value.prototype.getValuekey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValuekey()));
};


/**
 * optional bytes valueKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValuekey()`
 * @return {!Uint8Array}
 */
proto.Value.prototype.getValuekey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValuekey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Value.prototype.setValuekey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes serializedData = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Value.prototype.getSerializeddata = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes serializedData = 3;
 * This is a type-conversion wrapper around `getSerializeddata()`
 * @return {string}
 */
proto.Value.prototype.getSerializeddata_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSerializeddata()));
};


/**
 * optional bytes serializedData = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSerializeddata()`
 * @return {!Uint8Array}
 */
proto.Value.prototype.getSerializeddata_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSerializeddata()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Value.prototype.setSerializeddata = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 ttl = 4;
 * @return {number}
 */
proto.Value.prototype.getTtl = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.Value.prototype.setTtl = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Inv = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Inv, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Inv.displayName = 'proto.Inv';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Inv.prototype.toObject = function(opt_includeInstance) {
  return proto.Inv.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Inv} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Inv.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyword: msg.getKeyword_asB64(),
    valuekey: msg.getValuekey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Inv}
 */
proto.Inv.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Inv;
  return proto.Inv.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Inv} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Inv}
 */
proto.Inv.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKeyword(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValuekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Inv} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Inv.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Inv.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Inv.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getKeyword_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getValuekey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Inv} The clone.
 */
proto.Inv.prototype.cloneMessage = function() {
  return /** @type {!proto.Inv} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes keyword = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Inv.prototype.getKeyword = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes keyword = 1;
 * This is a type-conversion wrapper around `getKeyword()`
 * @return {string}
 */
proto.Inv.prototype.getKeyword_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKeyword()));
};


/**
 * optional bytes keyword = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKeyword()`
 * @return {!Uint8Array}
 */
proto.Inv.prototype.getKeyword_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKeyword()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Inv.prototype.setKeyword = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes valueKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Inv.prototype.getValuekey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes valueKey = 2;
 * This is a type-conversion wrapper around `getValuekey()`
 * @return {string}
 */
proto.Inv.prototype.getValuekey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValuekey()));
};


/**
 * optional bytes valueKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValuekey()`
 * @return {!Uint8Array}
 */
proto.Inv.prototype.getValuekey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValuekey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Inv.prototype.setValuekey = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Profile.repeatedFields_, null);
};
goog.inherits(proto.Profile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.displayName = 'proto.Profile';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Profile.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Profile.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    location: msg.getLocation(),
    guidKey: (f = msg.getGuidKey()) && proto.Profile.PublicKey.toObject(includeInstance, f),
    bitcoinKey: (f = msg.getBitcoinKey()) && proto.Profile.PublicKey.toObject(includeInstance, f),
    nsfw: msg.getNsfw(),
    vendor: msg.getVendor(),
    moderator: msg.getModerator(),
    moderationFee: msg.getModerationFee(),
    handle: msg.getHandle(),
    about: msg.getAbout(),
    shortDescription: msg.getShortDescription(),
    website: msg.getWebsite(),
    email: msg.getEmail(),
    socialList: jspb.Message.toObjectList(msg.getSocialList(),
    proto.Profile.SocialAccount.toObject, includeInstance),
    primaryColor: msg.getPrimaryColor(),
    secondaryColor: msg.getSecondaryColor(),
    backgroundColor: msg.getBackgroundColor(),
    textColor: msg.getTextColor(),
    followerCount: msg.getFollowerCount(),
    followingCount: msg.getFollowingCount(),
    pgpKey: (f = msg.getPgpKey()) && proto.Profile.PublicKey.toObject(includeInstance, f),
    avatarHash: msg.getAvatarHash_asB64(),
    headerHash: msg.getHeaderHash_asB64(),
    lastModified: msg.getLastModified()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile}
 */
proto.Profile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile;
  return proto.Profile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile}
 */
proto.Profile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.CountryCode} */ (reader.readEnum());
      msg.setLocation(value);
      break;
    case 3:
      var value = new proto.Profile.PublicKey;
      reader.readMessage(value,proto.Profile.PublicKey.deserializeBinaryFromReader);
      msg.setGuidKey(value);
      break;
    case 4:
      var value = new proto.Profile.PublicKey;
      reader.readMessage(value,proto.Profile.PublicKey.deserializeBinaryFromReader);
      msg.setBitcoinKey(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNsfw(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setVendor(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setModerator(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setModerationFee(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setAbout(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortDescription(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebsite(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 14:
      var value = new proto.Profile.SocialAccount;
      reader.readMessage(value,proto.Profile.SocialAccount.deserializeBinaryFromReader);
      msg.getSocialList().push(value);
      msg.setSocialList(msg.getSocialList());
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPrimaryColor(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSecondaryColor(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBackgroundColor(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTextColor(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFollowerCount(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFollowingCount(value);
      break;
    case 21:
      var value = new proto.Profile.PublicKey;
      reader.readMessage(value,proto.Profile.PublicKey.deserializeBinaryFromReader);
      msg.setPgpKey(value);
      break;
    case 22:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAvatarHash(value);
      break;
    case 23:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHeaderHash(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Profile} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Profile.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Profile.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getLocation();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = this.getGuidKey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Profile.PublicKey.serializeBinaryToWriter
    );
  }
  f = this.getBitcoinKey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Profile.PublicKey.serializeBinaryToWriter
    );
  }
  f = this.getNsfw();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getVendor();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = this.getModerator();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getModerationFee();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = this.getHandle();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getAbout();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getShortDescription();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getWebsite();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = this.getEmail();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = this.getSocialList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.Profile.SocialAccount.serializeBinaryToWriter
    );
  }
  f = this.getPrimaryColor();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = this.getSecondaryColor();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = this.getBackgroundColor();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = this.getTextColor();
  if (f !== 0) {
    writer.writeUint32(
      18,
      f
    );
  }
  f = this.getFollowerCount();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = this.getFollowingCount();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = this.getPgpKey();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.Profile.PublicKey.serializeBinaryToWriter
    );
  }
  f = this.getAvatarHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      22,
      f
    );
  }
  f = this.getHeaderHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      23,
      f
    );
  }
  f = this.getLastModified();
  if (f !== 0) {
    writer.writeUint64(
      24,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Profile} The clone.
 */
proto.Profile.prototype.cloneMessage = function() {
  return /** @type {!proto.Profile} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Profile.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Profile.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional CountryCode location = 2;
 * @return {!proto.CountryCode}
 */
proto.Profile.prototype.getLocation = function() {
  return /** @type {!proto.CountryCode} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {!proto.CountryCode} value  */
proto.Profile.prototype.setLocation = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional PublicKey guid_key = 3;
 * @return {proto.Profile.PublicKey}
 */
proto.Profile.prototype.getGuidKey = function() {
  return /** @type{proto.Profile.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.Profile.PublicKey, 3));
};


/** @param {proto.Profile.PublicKey|undefined} value  */
proto.Profile.prototype.setGuidKey = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Profile.prototype.clearGuidKey = function() {
  this.setGuidKey(undefined);
};


/**
 * optional PublicKey bitcoin_key = 4;
 * @return {proto.Profile.PublicKey}
 */
proto.Profile.prototype.getBitcoinKey = function() {
  return /** @type{proto.Profile.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.Profile.PublicKey, 4));
};


/** @param {proto.Profile.PublicKey|undefined} value  */
proto.Profile.prototype.setBitcoinKey = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Profile.prototype.clearBitcoinKey = function() {
  this.setBitcoinKey(undefined);
};


/**
 * optional bool nsfw = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Profile.prototype.getNsfw = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.Profile.prototype.setNsfw = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional bool vendor = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Profile.prototype.getVendor = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 6, false));
};


/** @param {boolean} value  */
proto.Profile.prototype.setVendor = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool moderator = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Profile.prototype.getModerator = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.Profile.prototype.setModerator = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional float moderation_fee = 8;
 * @return {number}
 */
proto.Profile.prototype.getModerationFee = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.Profile.prototype.setModerationFee = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string handle = 9;
 * @return {string}
 */
proto.Profile.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.Profile.prototype.setHandle = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string about = 10;
 * @return {string}
 */
proto.Profile.prototype.getAbout = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.Profile.prototype.setAbout = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string short_description = 11;
 * @return {string}
 */
proto.Profile.prototype.getShortDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.Profile.prototype.setShortDescription = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional string website = 12;
 * @return {string}
 */
proto.Profile.prototype.getWebsite = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 12, ""));
};


/** @param {string} value  */
proto.Profile.prototype.setWebsite = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional string email = 13;
 * @return {string}
 */
proto.Profile.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/** @param {string} value  */
proto.Profile.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * repeated SocialAccount social = 14;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Profile.SocialAccount>}
 */
proto.Profile.prototype.getSocialList = function() {
  return /** @type{!Array.<!proto.Profile.SocialAccount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Profile.SocialAccount, 14));
};


/** @param {Array.<!proto.Profile.SocialAccount>|undefined} value  */
proto.Profile.prototype.setSocialList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


proto.Profile.prototype.clearSocialList = function() {
  this.setSocialList([]);
};


/**
 * optional uint32 primary_color = 15;
 * @return {number}
 */
proto.Profile.prototype.getPrimaryColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 15, 0));
};


/** @param {number} value  */
proto.Profile.prototype.setPrimaryColor = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional uint32 secondary_color = 16;
 * @return {number}
 */
proto.Profile.prototype.getSecondaryColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 16, 0));
};


/** @param {number} value  */
proto.Profile.prototype.setSecondaryColor = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional uint32 background_color = 17;
 * @return {number}
 */
proto.Profile.prototype.getBackgroundColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 17, 0));
};


/** @param {number} value  */
proto.Profile.prototype.setBackgroundColor = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional uint32 text_color = 18;
 * @return {number}
 */
proto.Profile.prototype.getTextColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 18, 0));
};


/** @param {number} value  */
proto.Profile.prototype.setTextColor = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional uint32 follower_count = 19;
 * @return {number}
 */
proto.Profile.prototype.getFollowerCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 19, 0));
};


/** @param {number} value  */
proto.Profile.prototype.setFollowerCount = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional uint32 following_count = 20;
 * @return {number}
 */
proto.Profile.prototype.getFollowingCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 20, 0));
};


/** @param {number} value  */
proto.Profile.prototype.setFollowingCount = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional PublicKey pgp_key = 21;
 * @return {proto.Profile.PublicKey}
 */
proto.Profile.prototype.getPgpKey = function() {
  return /** @type{proto.Profile.PublicKey} */ (
    jspb.Message.getWrapperField(this, proto.Profile.PublicKey, 21));
};


/** @param {proto.Profile.PublicKey|undefined} value  */
proto.Profile.prototype.setPgpKey = function(value) {
  jspb.Message.setWrapperField(this, 21, value);
};


proto.Profile.prototype.clearPgpKey = function() {
  this.setPgpKey(undefined);
};


/**
 * optional bytes avatar_hash = 22;
 * @return {!(string|Uint8Array)}
 */
proto.Profile.prototype.getAvatarHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 22, ""));
};


/**
 * optional bytes avatar_hash = 22;
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {string}
 */
proto.Profile.prototype.getAvatarHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAvatarHash()));
};


/**
 * optional bytes avatar_hash = 22;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {!Uint8Array}
 */
proto.Profile.prototype.getAvatarHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAvatarHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Profile.prototype.setAvatarHash = function(value) {
  jspb.Message.setField(this, 22, value);
};


/**
 * optional bytes header_hash = 23;
 * @return {!(string|Uint8Array)}
 */
proto.Profile.prototype.getHeaderHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 23, ""));
};


/**
 * optional bytes header_hash = 23;
 * This is a type-conversion wrapper around `getHeaderHash()`
 * @return {string}
 */
proto.Profile.prototype.getHeaderHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHeaderHash()));
};


/**
 * optional bytes header_hash = 23;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHeaderHash()`
 * @return {!Uint8Array}
 */
proto.Profile.prototype.getHeaderHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHeaderHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Profile.prototype.setHeaderHash = function(value) {
  jspb.Message.setField(this, 23, value);
};


/**
 * optional uint64 last_modified = 24;
 * @return {number}
 */
proto.Profile.prototype.getLastModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 24, 0));
};


/** @param {number} value  */
proto.Profile.prototype.setLastModified = function(value) {
  jspb.Message.setField(this, 24, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile.SocialAccount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Profile.SocialAccount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.SocialAccount.displayName = 'proto.Profile.SocialAccount';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.SocialAccount.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.SocialAccount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile.SocialAccount} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Profile.SocialAccount.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: msg.getType(),
    username: msg.getUsername(),
    proofUrl: msg.getProofUrl()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile.SocialAccount}
 */
proto.Profile.SocialAccount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile.SocialAccount;
  return proto.Profile.SocialAccount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile.SocialAccount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile.SocialAccount}
 */
proto.Profile.SocialAccount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Profile.SocialAccount.SocialType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProofUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Profile.SocialAccount} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Profile.SocialAccount.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.SocialAccount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Profile.SocialAccount.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = this.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getProofUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Profile.SocialAccount} The clone.
 */
proto.Profile.SocialAccount.prototype.cloneMessage = function() {
  return /** @type {!proto.Profile.SocialAccount} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional SocialType type = 1;
 * @return {!proto.Profile.SocialAccount.SocialType}
 */
proto.Profile.SocialAccount.prototype.getType = function() {
  return /** @type {!proto.Profile.SocialAccount.SocialType} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {!proto.Profile.SocialAccount.SocialType} value  */
proto.Profile.SocialAccount.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string username = 2;
 * @return {string}
 */
proto.Profile.SocialAccount.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Profile.SocialAccount.prototype.setUsername = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string proof_url = 3;
 * @return {string}
 */
proto.Profile.SocialAccount.prototype.getProofUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Profile.SocialAccount.prototype.setProofUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.Profile.SocialAccount.SocialType = {
  FACEBOOK: 0,
  TWITTER: 1,
  INSTAGRAM: 2,
  SNAPCHAT: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Profile.PublicKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Profile.PublicKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Profile.PublicKey.displayName = 'proto.Profile.PublicKey';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Profile.PublicKey.prototype.toObject = function(opt_includeInstance) {
  return proto.Profile.PublicKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Profile.PublicKey} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Profile.PublicKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Profile.PublicKey}
 */
proto.Profile.PublicKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Profile.PublicKey;
  return proto.Profile.PublicKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Profile.PublicKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Profile.PublicKey}
 */
proto.Profile.PublicKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Profile.PublicKey} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Profile.PublicKey.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Profile.PublicKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Profile.PublicKey.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Profile.PublicKey} The clone.
 */
proto.Profile.PublicKey.prototype.cloneMessage = function() {
  return /** @type {!proto.Profile.PublicKey} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Profile.PublicKey.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.Profile.PublicKey.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.Profile.PublicKey.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Profile.PublicKey.prototype.setPublicKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes signature = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Profile.PublicKey.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes signature = 2;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.Profile.PublicKey.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.Profile.PublicKey.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Profile.PublicKey.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Metadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Metadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Metadata.displayName = 'proto.Metadata';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Metadata.prototype.toObject = function(opt_includeInstance) {
  return proto.Metadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Metadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Metadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: msg.getName(),
    handle: msg.getHandle(),
    shortDescription: msg.getShortDescription(),
    avatarHash: msg.getAvatarHash_asB64(),
    nsfw: msg.getNsfw()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Metadata}
 */
proto.Metadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Metadata;
  return proto.Metadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Metadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Metadata}
 */
proto.Metadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setShortDescription(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAvatarHash(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNsfw(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Metadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Metadata.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Metadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Metadata.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getHandle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getShortDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getAvatarHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = this.getNsfw();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Metadata} The clone.
 */
proto.Metadata.prototype.cloneMessage = function() {
  return /** @type {!proto.Metadata} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Metadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.Metadata.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string handle = 2;
 * @return {string}
 */
proto.Metadata.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Metadata.prototype.setHandle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string short_description = 3;
 * @return {string}
 */
proto.Metadata.prototype.getShortDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.Metadata.prototype.setShortDescription = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes avatar_hash = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Metadata.prototype.getAvatarHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes avatar_hash = 4;
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {string}
 */
proto.Metadata.prototype.getAvatarHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAvatarHash()));
};


/**
 * optional bytes avatar_hash = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {!Uint8Array}
 */
proto.Metadata.prototype.getAvatarHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAvatarHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Metadata.prototype.setAvatarHash = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool nsfw = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Metadata.prototype.getNsfw = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.Metadata.prototype.setNsfw = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Listings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Listings.repeatedFields_, null);
};
goog.inherits(proto.Listings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Listings.displayName = 'proto.Listings';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Listings.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Listings.prototype.toObject = function(opt_includeInstance) {
  return proto.Listings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Listings} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Listings.toObject = function(includeInstance, msg) {
  var f, obj = {
    listingList: jspb.Message.toObjectList(msg.getListingList(),
    proto.Listings.ListingMetadata.toObject, includeInstance),
    handle: msg.getHandle(),
    avatarHash: msg.getAvatarHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Listings}
 */
proto.Listings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Listings;
  return proto.Listings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Listings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Listings}
 */
proto.Listings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Listings.ListingMetadata;
      reader.readMessage(value,proto.Listings.ListingMetadata.deserializeBinaryFromReader);
      msg.getListingList().push(value);
      msg.setListingList(msg.getListingList());
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAvatarHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Listings} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Listings.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Listings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Listings.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getListingList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Listings.ListingMetadata.serializeBinaryToWriter
    );
  }
  f = this.getHandle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getAvatarHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Listings} The clone.
 */
proto.Listings.prototype.cloneMessage = function() {
  return /** @type {!proto.Listings} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated ListingMetadata listing = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Listings.ListingMetadata>}
 */
proto.Listings.prototype.getListingList = function() {
  return /** @type{!Array.<!proto.Listings.ListingMetadata>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Listings.ListingMetadata, 1));
};


/** @param {Array.<!proto.Listings.ListingMetadata>|undefined} value  */
proto.Listings.prototype.setListingList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.Listings.prototype.clearListingList = function() {
  this.setListingList([]);
};


/**
 * optional string handle = 2;
 * @return {string}
 */
proto.Listings.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Listings.prototype.setHandle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes avatar_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Listings.prototype.getAvatarHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes avatar_hash = 3;
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {string}
 */
proto.Listings.prototype.getAvatarHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAvatarHash()));
};


/**
 * optional bytes avatar_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {!Uint8Array}
 */
proto.Listings.prototype.getAvatarHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAvatarHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Listings.prototype.setAvatarHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.Listings.ContractType = {
  NOT_SET: 0,
  PHYSICAL_GOOD: 1,
  DIGITAL_GOOD: 2,
  SERVICE: 3
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Listings.ListingMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Listings.ListingMetadata.repeatedFields_, null);
};
goog.inherits(proto.Listings.ListingMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Listings.ListingMetadata.displayName = 'proto.Listings.ListingMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Listings.ListingMetadata.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Listings.ListingMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.Listings.ListingMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Listings.ListingMetadata} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Listings.ListingMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractHash: msg.getContractHash_asB64(),
    title: msg.getTitle(),
    thumbnailHash: msg.getThumbnailHash_asB64(),
    category: msg.getCategory(),
    price: msg.getPrice(),
    currencyCode: msg.getCurrencyCode(),
    nsfw: msg.getNsfw(),
    origin: msg.getOrigin(),
    shipsToList: jspb.Message.getField(msg, 9),
    avatarHash: msg.getAvatarHash_asB64(),
    handle: msg.getHandle(),
    contractType: msg.getContractType(),
    lastModified: msg.getLastModified(),
    pinned: msg.getPinned(),
    hidden: msg.getHidden()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Listings.ListingMetadata}
 */
proto.Listings.ListingMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Listings.ListingMetadata;
  return proto.Listings.ListingMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Listings.ListingMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Listings.ListingMetadata}
 */
proto.Listings.ListingMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContractHash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setThumbnailHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCategory(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrencyCode(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNsfw(value);
      break;
    case 8:
      var value = /** @type {!proto.CountryCode} */ (reader.readEnum());
      msg.setOrigin(value);
      break;
    case 9:
      var value = /** @type {!Array.<!proto.CountryCode>} */ (reader.readPackedEnum());
      msg.setShipsToList(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAvatarHash(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 12:
      var value = /** @type {!proto.Listings.ContractType} */ (reader.readEnum());
      msg.setContractType(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLastModified(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPinned(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHidden(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Listings.ListingMetadata} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Listings.ListingMetadata.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Listings.ListingMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Listings.ListingMetadata.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getContractHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getTitle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getThumbnailHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getCategory();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = this.getCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getNsfw();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getOrigin();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = this.getShipsToList();
  if (f.length > 0) {
    writer.writePackedEnum(
      9,
      f
    );
  }
  f = this.getAvatarHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = this.getHandle();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = this.getContractType();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
  f = this.getLastModified();
  if (f !== 0) {
    writer.writeUint64(
      13,
      f
    );
  }
  f = this.getPinned();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = this.getHidden();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Listings.ListingMetadata} The clone.
 */
proto.Listings.ListingMetadata.prototype.cloneMessage = function() {
  return /** @type {!proto.Listings.ListingMetadata} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes contract_hash = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Listings.ListingMetadata.prototype.getContractHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes contract_hash = 1;
 * This is a type-conversion wrapper around `getContractHash()`
 * @return {string}
 */
proto.Listings.ListingMetadata.prototype.getContractHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContractHash()));
};


/**
 * optional bytes contract_hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContractHash()`
 * @return {!Uint8Array}
 */
proto.Listings.ListingMetadata.prototype.getContractHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContractHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Listings.ListingMetadata.prototype.setContractHash = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string title = 2;
 * @return {string}
 */
proto.Listings.ListingMetadata.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.Listings.ListingMetadata.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes thumbnail_hash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Listings.ListingMetadata.prototype.getThumbnailHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes thumbnail_hash = 3;
 * This is a type-conversion wrapper around `getThumbnailHash()`
 * @return {string}
 */
proto.Listings.ListingMetadata.prototype.getThumbnailHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getThumbnailHash()));
};


/**
 * optional bytes thumbnail_hash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getThumbnailHash()`
 * @return {!Uint8Array}
 */
proto.Listings.ListingMetadata.prototype.getThumbnailHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getThumbnailHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Listings.ListingMetadata.prototype.setThumbnailHash = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string category = 4;
 * @return {string}
 */
proto.Listings.ListingMetadata.prototype.getCategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.Listings.ListingMetadata.prototype.setCategory = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional float price = 5;
 * @return {number}
 */
proto.Listings.ListingMetadata.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.Listings.ListingMetadata.prototype.setPrice = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string currency_code = 6;
 * @return {string}
 */
proto.Listings.ListingMetadata.prototype.getCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.Listings.ListingMetadata.prototype.setCurrencyCode = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool nsfw = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Listings.ListingMetadata.prototype.getNsfw = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.Listings.ListingMetadata.prototype.setNsfw = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional CountryCode origin = 8;
 * @return {!proto.CountryCode}
 */
proto.Listings.ListingMetadata.prototype.getOrigin = function() {
  return /** @type {!proto.CountryCode} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {!proto.CountryCode} value  */
proto.Listings.ListingMetadata.prototype.setOrigin = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * repeated CountryCode ships_to = 9;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.CountryCode>}
 */
proto.Listings.ListingMetadata.prototype.getShipsToList = function() {
  return /** @type {!Array.<!proto.CountryCode>} */ (jspb.Message.getField(this, 9));
};


/** @param {!Array.<!proto.CountryCode>} value  */
proto.Listings.ListingMetadata.prototype.setShipsToList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * optional bytes avatar_hash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.Listings.ListingMetadata.prototype.getAvatarHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/**
 * optional bytes avatar_hash = 10;
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {string}
 */
proto.Listings.ListingMetadata.prototype.getAvatarHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAvatarHash()));
};


/**
 * optional bytes avatar_hash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {!Uint8Array}
 */
proto.Listings.ListingMetadata.prototype.getAvatarHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAvatarHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Listings.ListingMetadata.prototype.setAvatarHash = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional string handle = 11;
 * @return {string}
 */
proto.Listings.ListingMetadata.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 11, ""));
};


/** @param {string} value  */
proto.Listings.ListingMetadata.prototype.setHandle = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional ContractType contract_type = 12;
 * @return {!proto.Listings.ContractType}
 */
proto.Listings.ListingMetadata.prototype.getContractType = function() {
  return /** @type {!proto.Listings.ContractType} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {!proto.Listings.ContractType} value  */
proto.Listings.ListingMetadata.prototype.setContractType = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional uint64 last_modified = 13;
 * @return {number}
 */
proto.Listings.ListingMetadata.prototype.getLastModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 13, 0));
};


/** @param {number} value  */
proto.Listings.ListingMetadata.prototype.setLastModified = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bool pinned = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Listings.ListingMetadata.prototype.getPinned = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 14, false));
};


/** @param {boolean} value  */
proto.Listings.ListingMetadata.prototype.setPinned = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional bool hidden = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Listings.ListingMetadata.prototype.getHidden = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 15, false));
};


/** @param {boolean} value  */
proto.Listings.ListingMetadata.prototype.setHidden = function(value) {
  jspb.Message.setField(this, 15, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Followers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Followers.repeatedFields_, null);
};
goog.inherits(proto.Followers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Followers.displayName = 'proto.Followers';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Followers.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Followers.prototype.toObject = function(opt_includeInstance) {
  return proto.Followers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Followers} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Followers.toObject = function(includeInstance, msg) {
  var f, obj = {
    followersList: jspb.Message.toObjectList(msg.getFollowersList(),
    proto.Followers.Follower.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Followers}
 */
proto.Followers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Followers;
  return proto.Followers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Followers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Followers}
 */
proto.Followers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Followers.Follower;
      reader.readMessage(value,proto.Followers.Follower.deserializeBinaryFromReader);
      msg.getFollowersList().push(value);
      msg.setFollowersList(msg.getFollowersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Followers} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Followers.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Followers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Followers.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFollowersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Followers.Follower.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Followers} The clone.
 */
proto.Followers.prototype.cloneMessage = function() {
  return /** @type {!proto.Followers} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Follower followers = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Followers.Follower>}
 */
proto.Followers.prototype.getFollowersList = function() {
  return /** @type{!Array.<!proto.Followers.Follower>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Followers.Follower, 1));
};


/** @param {Array.<!proto.Followers.Follower>|undefined} value  */
proto.Followers.prototype.setFollowersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.Followers.prototype.clearFollowersList = function() {
  this.setFollowersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Followers.Follower = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Followers.Follower, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Followers.Follower.displayName = 'proto.Followers.Follower';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Followers.Follower.prototype.toObject = function(opt_includeInstance) {
  return proto.Followers.Follower.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Followers.Follower} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Followers.Follower.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: msg.getGuid_asB64(),
    following: msg.getFollowing_asB64(),
    pubkey: msg.getPubkey_asB64(),
    metadata: (f = msg.getMetadata()) && proto.Metadata.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Followers.Follower}
 */
proto.Followers.Follower.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Followers.Follower;
  return proto.Followers.Follower.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Followers.Follower} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Followers.Follower}
 */
proto.Followers.Follower.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFollowing(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 4:
      var value = new proto.Metadata;
      reader.readMessage(value,proto.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Followers.Follower} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Followers.Follower.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Followers.Follower.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Followers.Follower.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFollowing_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Metadata.serializeBinaryToWriter
    );
  }
  f = this.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Followers.Follower} The clone.
 */
proto.Followers.Follower.prototype.cloneMessage = function() {
  return /** @type {!proto.Followers.Follower} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes guid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Followers.Follower.prototype.getGuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes guid = 1;
 * This is a type-conversion wrapper around `getGuid()`
 * @return {string}
 */
proto.Followers.Follower.prototype.getGuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGuid()));
};


/**
 * optional bytes guid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGuid()`
 * @return {!Uint8Array}
 */
proto.Followers.Follower.prototype.getGuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGuid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Followers.Follower.prototype.setGuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes following = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Followers.Follower.prototype.getFollowing = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes following = 2;
 * This is a type-conversion wrapper around `getFollowing()`
 * @return {string}
 */
proto.Followers.Follower.prototype.getFollowing_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFollowing()));
};


/**
 * optional bytes following = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFollowing()`
 * @return {!Uint8Array}
 */
proto.Followers.Follower.prototype.getFollowing_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFollowing()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Followers.Follower.prototype.setFollowing = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes pubkey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Followers.Follower.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes pubkey = 3;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.Followers.Follower.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.Followers.Follower.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Followers.Follower.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional Metadata metadata = 4;
 * @return {proto.Metadata}
 */
proto.Followers.Follower.prototype.getMetadata = function() {
  return /** @type{proto.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.Metadata, 4));
};


/** @param {proto.Metadata|undefined} value  */
proto.Followers.Follower.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Followers.Follower.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * optional bytes signature = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Followers.Follower.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/**
 * optional bytes signature = 5;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.Followers.Follower.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.Followers.Follower.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Followers.Follower.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Following = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Following.repeatedFields_, null);
};
goog.inherits(proto.Following, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Following.displayName = 'proto.Following';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Following.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Following.prototype.toObject = function(opt_includeInstance) {
  return proto.Following.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Following} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Following.toObject = function(includeInstance, msg) {
  var f, obj = {
    usersList: jspb.Message.toObjectList(msg.getUsersList(),
    proto.Following.User.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Following}
 */
proto.Following.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Following;
  return proto.Following.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Following} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Following}
 */
proto.Following.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Following.User;
      reader.readMessage(value,proto.Following.User.deserializeBinaryFromReader);
      msg.getUsersList().push(value);
      msg.setUsersList(msg.getUsersList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Following} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Following.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Following.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Following.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getUsersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Following.User.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Following} The clone.
 */
proto.Following.prototype.cloneMessage = function() {
  return /** @type {!proto.Following} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated User users = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Following.User>}
 */
proto.Following.prototype.getUsersList = function() {
  return /** @type{!Array.<!proto.Following.User>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Following.User, 1));
};


/** @param {Array.<!proto.Following.User>|undefined} value  */
proto.Following.prototype.setUsersList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.Following.prototype.clearUsersList = function() {
  this.setUsersList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Following.User = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Following.User, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Following.User.displayName = 'proto.Following.User';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Following.User.prototype.toObject = function(opt_includeInstance) {
  return proto.Following.User.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Following.User} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Following.User.toObject = function(includeInstance, msg) {
  var f, obj = {
    guid: msg.getGuid_asB64(),
    pubkey: msg.getPubkey_asB64(),
    metadata: (f = msg.getMetadata()) && proto.Metadata.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Following.User}
 */
proto.Following.User.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Following.User;
  return proto.Following.User.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Following.User} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Following.User}
 */
proto.Following.User.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGuid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 3:
      var value = new proto.Metadata;
      reader.readMessage(value,proto.Metadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Following.User} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Following.User.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Following.User.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Following.User.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Metadata.serializeBinaryToWriter
    );
  }
  f = this.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Following.User} The clone.
 */
proto.Following.User.prototype.cloneMessage = function() {
  return /** @type {!proto.Following.User} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes guid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Following.User.prototype.getGuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes guid = 1;
 * This is a type-conversion wrapper around `getGuid()`
 * @return {string}
 */
proto.Following.User.prototype.getGuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGuid()));
};


/**
 * optional bytes guid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGuid()`
 * @return {!Uint8Array}
 */
proto.Following.User.prototype.getGuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGuid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Following.User.prototype.setGuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes pubkey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Following.User.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes pubkey = 2;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.Following.User.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.Following.User.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Following.User.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional Metadata metadata = 3;
 * @return {proto.Metadata}
 */
proto.Following.User.prototype.getMetadata = function() {
  return /** @type{proto.Metadata} */ (
    jspb.Message.getWrapperField(this, proto.Metadata, 3));
};


/** @param {proto.Metadata|undefined} value  */
proto.Following.User.prototype.setMetadata = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Following.User.prototype.clearMetadata = function() {
  this.setMetadata(undefined);
};


/**
 * optional bytes signature = 4;
 * @return {!(string|Uint8Array)}
 */
proto.Following.User.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes signature = 4;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.Following.User.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.Following.User.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Following.User.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PlaintextMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PlaintextMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PlaintextMessage.displayName = 'proto.PlaintextMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PlaintextMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.PlaintextMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PlaintextMessage} msg The msg instance to transform.
 * @return {!Object}
 */
proto.PlaintextMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    senderGuid: msg.getSenderGuid_asB64(),
    handle: msg.getHandle(),
    pubkey: msg.getPubkey_asB64(),
    subject: msg.getSubject(),
    type: msg.getType(),
    message: msg.getMessage(),
    timestamp: msg.getTimestamp(),
    avatarHash: msg.getAvatarHash_asB64(),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PlaintextMessage}
 */
proto.PlaintextMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PlaintextMessage;
  return proto.PlaintextMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PlaintextMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PlaintextMessage}
 */
proto.PlaintextMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderGuid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setHandle(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubject(value);
      break;
    case 5:
      var value = /** @type {!proto.PlaintextMessage.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTimestamp(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAvatarHash(value);
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.PlaintextMessage} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlaintextMessage.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PlaintextMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.PlaintextMessage.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getSenderGuid_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getHandle();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getPubkey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getSubject();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = this.getMessage();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getTimestamp();
  if (f !== 0) {
    writer.writeUint64(
      7,
      f
    );
  }
  f = this.getAvatarHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
  f = this.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.PlaintextMessage} The clone.
 */
proto.PlaintextMessage.prototype.cloneMessage = function() {
  return /** @type {!proto.PlaintextMessage} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes sender_guid = 1;
 * @return {!(string|Uint8Array)}
 */
proto.PlaintextMessage.prototype.getSenderGuid = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes sender_guid = 1;
 * This is a type-conversion wrapper around `getSenderGuid()`
 * @return {string}
 */
proto.PlaintextMessage.prototype.getSenderGuid_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderGuid()));
};


/**
 * optional bytes sender_guid = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderGuid()`
 * @return {!Uint8Array}
 */
proto.PlaintextMessage.prototype.getSenderGuid_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderGuid()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlaintextMessage.prototype.setSenderGuid = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string handle = 2;
 * @return {string}
 */
proto.PlaintextMessage.prototype.getHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.PlaintextMessage.prototype.setHandle = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes pubkey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.PlaintextMessage.prototype.getPubkey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes pubkey = 3;
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {string}
 */
proto.PlaintextMessage.prototype.getPubkey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkey()));
};


/**
 * optional bytes pubkey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkey()`
 * @return {!Uint8Array}
 */
proto.PlaintextMessage.prototype.getPubkey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkey()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlaintextMessage.prototype.setPubkey = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string subject = 4;
 * @return {string}
 */
proto.PlaintextMessage.prototype.getSubject = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.PlaintextMessage.prototype.setSubject = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional Type type = 5;
 * @return {!proto.PlaintextMessage.Type}
 */
proto.PlaintextMessage.prototype.getType = function() {
  return /** @type {!proto.PlaintextMessage.Type} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {!proto.PlaintextMessage.Type} value  */
proto.PlaintextMessage.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string message = 6;
 * @return {string}
 */
proto.PlaintextMessage.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.PlaintextMessage.prototype.setMessage = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint64 timestamp = 7;
 * @return {number}
 */
proto.PlaintextMessage.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.PlaintextMessage.prototype.setTimestamp = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bytes avatar_hash = 8;
 * @return {!(string|Uint8Array)}
 */
proto.PlaintextMessage.prototype.getAvatarHash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 8, ""));
};


/**
 * optional bytes avatar_hash = 8;
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {string}
 */
proto.PlaintextMessage.prototype.getAvatarHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAvatarHash()));
};


/**
 * optional bytes avatar_hash = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAvatarHash()`
 * @return {!Uint8Array}
 */
proto.PlaintextMessage.prototype.getAvatarHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAvatarHash()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlaintextMessage.prototype.setAvatarHash = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional bytes signature = 9;
 * @return {!(string|Uint8Array)}
 */
proto.PlaintextMessage.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/**
 * optional bytes signature = 9;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.PlaintextMessage.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes signature = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.PlaintextMessage.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value  */
proto.PlaintextMessage.prototype.setSignature = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * @enum {number}
 */
proto.PlaintextMessage.Type = {
  CHAT: 0,
  ORDER: 1,
  DISPUTE_OPEN: 2,
  DISPUTE_CLOSE: 3,
  ORDER_CONFIRMATION: 4,
  RECEIPT: 5,
  REFUND: 6
};

/**
 * @enum {number}
 */
proto.NATType = {
  FULL_CONE: 0,
  RESTRICTED: 1,
  SYMMETRIC: 2
};

goog.object.extend(exports, proto);
